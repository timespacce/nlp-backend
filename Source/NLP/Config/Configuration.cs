#if UNITY
    using UnityEngine;
#endif 

namespace AdessoVR
{
    namespace Global
    {
        public class Configuration
        {
            private static readonly AdessoVR.Global.Configuration instance = new AdessoVR.Global.Configuration();

            public static AdessoVR.Global.Configuration Get()
            {
                return instance;
            }

            private Configuration()
            {
#if UNITY
                this.output_sample_rate = AudioSettings.outputSampleRate;
#endif
                this.delta_bin_resolution = output_sample_rate / (2.0f * bandwidth);
                this.time_window = 1.0f / this.delta_bin_resolution;
            }

            public void SetLanguageModelPath(string dir)
            {
                prefix = dir;
                phrases = prefix + "Phrases.json";
                tasks = prefix + "Tasks.json";
                transition_events = prefix + "TransitionEvents.json";
                stages = prefix + "Stages.json";
                levels = prefix + "Levels.json";
            }

            public string prefix, phrases, tasks, transition_events, stages, levels;

            /// <summary>
            /// Client.cs
            /// </summary>
            public int stream_sample_rate = 16000;

            public int record_w = 1;

            public string language_code = "de-DE";

            /// interrupt on pause
            public bool single_utterace = false;

            /// differentiation between final and partial result
            public bool interim_results = true;

            /// generated by google cloud as a service key
            public string credential_key_file = "Keys/credential_key";

            /// <summary>
            /// ViewToFrustumTransformer.cs
            /// </summary>

            public float screen_scale = 1e-1f;

            /// unit-normalized pivot coordinates - specify centre of render plane
            public float pivot_x = 0.5f;
            public float pivot_y = 0.5f;
            /// unit-normalized bottom-top interpolation coefficient
            public float offset_y = 0.9f;
            /// unit-normalized width occupancy coefficient
            public float offset_x = 0.5f;

            /// <summary>
            /// SpectrumFilter.cs
            /// </summary>

            // [0 < epsilon <= float]
            public float epsilon = 1.0f / float.MaxValue;
            // [0x0001 <= Unity FFT' bins <= 0x2000]
            public int bandwidth = 0x200;
            /// Unity can't sample more than AudioSettings.outputSampleRate
            public int output_sample_rate;
            /// Quantization (Nyquist-Shannon theorem) and scale of spectrum
            public float delta_bin_resolution;
            public float time_window;
            /// speech interval - specified by tensor equation - f = [x - y] |f| >= z
            public float x = 8e1f;
            public float y = 8e3f;
            public float z = 1e-3f;
            /// [s]
            public float timeout = 1e0f;
            public float loop_factor = 2.0f;
            /// unit-normalized fading interpolation decceleration
            public float fading = 9e-1f;
        }
    }
}
